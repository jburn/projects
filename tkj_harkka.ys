# TKJ-harjoitustyö 2020: Satunnaislukugeneraattori (Middle-square)
# Juho Bruun, 2631927, jopbruun@gmail.com
#
# Pohdinta:
# Aluksi testiajot palauttivat: 34228, 39121, 42926, 100923, 48919, 27252 käskyä (suuntaa antavia arvoja)
# keskimäärin n. 40 000 käskyä per suoritus, pahimmillaan jopa yli 100 000
# käskyjen määrää kasvatti lähinnä jakolasku
# Sitten tein optimisaatioita jakolaskuun:
#   jaetaan nyt ensin sadat tuhannet, sitten kymmenet tuhannet jne.
#   käytännössä bittisiirretään oikealle numero kerrallaan
#   paljon tehokkaampi kuin jakaa luku sadalla
# Testiajot palauttavat nyt käskymääriä väliltä 900 - 2000 
# (kaikki käskymäärät saatu lisäämällä laskuriin 1 aina kun suoritetaan jokin komento)
# myös ns. parempi kertolasku vähentää käskyjen määrää todella paljon
# aliohjelmat piti tavallaan integroida pääohjelmaan sillä pinon käyttö
# aliohjelmassa ei onnistunut
# Ohjelman toiminta:
#   - luku ^ 2
#   - saadusta luvusta vähennetään silmukassa 1 000 000, kunnes se on kuusinumeroinen
#   - saatu luku jaetaan sadalla (vaiheittain: 100 000, 10 000, 1 000 ja sitten 100)
#   - saadaan nelinumeroinen luku
#   - saatu luku laitetaan muuttujaan seuraavan silmukan käytettäväksi ja pusketaan sitten pinoon
#   - toistetaan kunnes pinossa on viisi pseudosatunnaislukua

main:
    irmovq $1, %r14     #silmukkamuuttuja
    irmovq $5, %r13     #silmukan kierrosten määrä
    irmovq $0, %rbx     #nollarekisteri
silmukka:
    rrmovq %r8, %rdi    #sijoitetaan luku kerrottavaksi
    rrmovq %r8, %rsi    #sijoitetaan luku kertojaksi
    call nelio          #lasketaan luvun nelio
    rrmovq %rcx, %rdi   #tulos rekisteriin rdi seuraavaa aliohjelmaa varten
    call poisto         #poistetaan edeltävät luvut (ABCDEFGH - AB = CDEFGH)
    irmovq $0, %rax     #nollataan jakosilmukan tulosrekisteri
    #alla olevassa osiossa poistetaan jälkeiset luvut (CDEFGH - GH = CDEF)
    irmovq $1000, %r10  #1. jakosilmukan muuttujat
    irmovq $100000, %rsi
    call jakosilmukka   #1. jakosilmukka
    irmovq $100, %r10   #2. jakosilmukan muuttujat
    irmovq $10000, %rsi
    call jakosilmukka   #2. jakosilmukka
    irmovq $10, %r10    #3. jakosilmukan muuttujat
    irmovq $1000, %rsi
    call jakosilmukka   #3. jakosilmukka
    irmovq $1, %r10     #4. jakosilmukan muuttujat
    irmovq $100, %rsi   
    call jakosilmukka   #4. jakosilmukka
    subq %rsi, %rdi     #jos jaettava = jakaja, tasataan
    je tasaus           #muuten jatketaan
jatko:
    pushq %rax          #tallennetaan luku (CDEF) pinoon
    rrmovq %rax, %r8    #tallennetaan luku siemenluvuksi seuraavalle silmukkakierrokselle
    subq %r14, %r13     #kierrokset += 1
    jg silmukka         #jos kierrokset < 5, jatketaan silmukan suoritusta
    halt                #lopetus
tasaus:
    addq %r14, %rax     #tulos += 1
    jmp jatko           #jatketaan


.pos 0x700
poisto:               #aliohjelma, jolla poistetaan turhat edeltävät luvut (>= 1 000 000)
    irmovq $0xF4240, %r10 #poistettava (1 000 000) arvo muuttujaan
poistosilmukka:
    subq %r10, %rdi       #luku - 1 000 000
    jg poistosilmukka     #jos luku > 1 000 000, jatka poistolooppia
    subq %rbx, %rdi       #jos luku = 0
    je loppu              #lopetetaan
    addq %r10, %rdi       #muuten: luku + 1 000 000, jotta päästään takaisin pos. lukuun
loppu:                #lopetus
    ret                   


.pos 0x800
jakosilmukka:    #aliohjelma, jolla poistetaan turhat jälkeiset luvut(yksi suoritus kerrallaan)
    subq %rsi, %rdi  #vähennetään jakaja luvusta
    jge lisays       #jos jakaja =< jaettava, lisätään tulokseen
    addq %rsi, %rdi  #muuten lisätään jakaja jaettavaan, jotta päästään takaisin pos. lukuun
    ret
lisays:
    addq %r10, %rax  #lisätään (jakaja / 100) tulokseen
    jmp jakosilmukka #silmukka jatkuu


.pos 0x900
nelio:                  #aliohjelma neliön laskemiseen
    #määritellään tarvittavat muuttujat
    irmovq $1, %rax         #bittimaski
    irmovq $0x8000, %r10    #bittimaskin max arvo
    irmovq $0, %rcx         #nollataan tulosrekisteri
kertolasku:             #kertolaskusilmukka
    rrmovq %rax, %r9        #väliaikaismaskin määrittely
    andq %rdi, %r9          #käytetään bittimaskia
    subq %rbx, %r9          #jos tulos = 0
    je siirto               #hyppy kohtaan siirto
    addq %rsi, %rcx         #lisätään tulokseen (rek. rcx)
siirto:                 #bittisiirtosilmukka
    rrmovq %r10, %rdx       #maskin max arvo va. muuttujaan
    addq %rax, %rax         #maski 2^n
    addq %rsi, %rsi         #kertoja^2
    subq %rax, %rdx         #jos maski > va. muuttuja
    jg kertolasku           #jatketaan silmukkaa
    ret                     #muuten lopetus
